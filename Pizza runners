https://8weeksqlchallenge.com/case-study-2/

CREATE SCHEMA pizza_runner;
SET search_path = pizza_runner;

DROP TABLE IF EXISTS runners;
CREATE TABLE runners (
  "runner_id" INTEGER,
  "registration_date" DATE
);
INSERT INTO runners
  ("runner_id", "registration_date")
VALUES
  (1, '2021-01-01'),
  (2, '2021-01-03'),
  (3, '2021-01-08'),
  (4, '2021-01-15');


DROP TABLE IF EXISTS customer_orders;
CREATE TABLE customer_orders (
  "order_id" INTEGER,
  "customer_id" INTEGER,
  "pizza_id" INTEGER,
  "exclusions" VARCHAR(4),
  "extras" VARCHAR(4),
  "order_time" TIMESTAMP
);

INSERT INTO customer_orders
  ("order_id", "customer_id", "pizza_id", "exclusions", "extras", "order_time")
VALUES
  ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
  ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
  ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
  ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
  ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
  ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
  ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
  ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
  ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
  ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
  ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');


DROP TABLE IF EXISTS runner_orders;
CREATE TABLE runner_orders (
  "order_id" INTEGER,
  "runner_id" INTEGER,
  "pickup_time" VARCHAR(19),
  "distance" VARCHAR(7),
  "duration" VARCHAR(10),
  "cancellation" VARCHAR(23)
);

INSERT INTO runner_orders
  ("order_id", "runner_id", "pickup_time", "distance", "duration", "cancellation")
VALUES
  ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
  ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
  ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
  ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
  ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
  ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
  ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
  ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
  ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
  ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');


DROP TABLE IF EXISTS pizza_names;
CREATE TABLE pizza_names (
  "pizza_id" INTEGER,
  "pizza_name" TEXT
);
INSERT INTO pizza_names
  ("pizza_id", "pizza_name")
VALUES
  (1, 'Meatlovers'),
  (2, 'Vegetarian');


DROP TABLE IF EXISTS pizza_recipes;
CREATE TABLE pizza_recipes (
  "pizza_id" INTEGER,
  "toppings" TEXT
);
INSERT INTO pizza_recipes
  ("pizza_id", "toppings")
VALUES
  (1, '1, 2, 3, 4, 5, 6, 8, 10'),
  (2, '4, 6, 7, 9, 11, 12');


DROP TABLE IF EXISTS pizza_toppings;
CREATE TABLE pizza_toppings (
  "topping_id" INTEGER,
  "topping_name" TEXT
);
INSERT INTO pizza_toppings
  ("topping_id", "topping_name")
VALUES
  (1, 'Bacon'),
  (2, 'BBQ Sauce'),
  (3, 'Beef'),
  (4, 'Cheese'),
  (5, 'Chicken'),
  (6, 'Mushrooms'),
  (7, 'Onions'),
  (8, 'Pepperoni'),
  (9, 'Peppers'),
  (10, 'Salami'),
  (11, 'Tomatoes'),
  (12, 'Tomato Sauce');


A. Pizza Metrics 
1. How many pizzas were ordered? 

SELECT  
  COUNT(pizza_id) as pizzas_ordered  
FROM customer_orders; 

2. How many unique customer orders were made? 

SELECT  
  COUNT(DISTINCT order_id) as unique_customer_orders  
FROM customer_orders; 

3. How many successful orders were delivered by each runner? 

SELECT 
  runner_id, 
  COUNT(DISTINCT order_id) as successful_orders
FROM runner_orders 
WHERE pickup_time <> 'null'
AND pickup_time IS NOT NULL 
AND pickup_time <> ''
GROUP BY runner_id;

4. How many of each type of pizza was delivered? 

SELECT 
  co.pizza_id, 
  pizza_name, 
  COUNT(co.pizza_id) as pizzas_delivered
FROM runner_orders ro
JOIN customer_orders co 
on ro.order_id = co.order_id
JOIN pizza_names pn 
on co.pizza_id = pn.pizza_id
WHERE pickup_time <> 'null'
AND pickup_time IS NOT NULL 
AND pickup_time <> ''
GROUP BY co.pizza_id, pizza_name;

5. How many Vegetarian and Meatlovers were ordered by each customer? 

SELECT 
  customer_id, 
  COUNT(pizza_name) FILTER (WHERE pizza_name = 'Meatlovers') as meat_orders,
  COUNT(pizza_name) FILTER (WHERE pizza_name = 'Vegetarian') as veg_orders
FROM customer_orders co 
JOIN pizza_names pn 
on co.pizza_id = pn.pizza_id
GROUP by customer_id;

6. What was the maximum number of pizzas delivered in a single order? 

SELECT 
  ro.order_id, 
  COUNT(ro.order_id) as num_pizzas
FROM runner_orders ro
JOIN customer_orders co
on ro.order_id = co.order_id
WHERE pickup_time <> 'null'
AND pickup_time IS NOT NULL 
AND pickup_time <> ''
GROUP BY ro.order_id
ORDER BY num_pizzas desc
LIMIT 1;

7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes? 

SELECT 
  co.customer_id, 
  SUM(CASE 
      WHEN (exclusions IS NOT NULL AND exclusions <> 'null' AND exclusions <> '') 
        OR (extras IS NOT NULL AND extras <> 'null' AND extras <> '') 
      THEN 1
      ELSE 0
  END) AS changes,
  SUM(CASE 
      WHEN ( (exclusions IS NULL OR exclusions = 'null' OR exclusions = '') 
          AND (extras IS NULL OR extras = 'null' OR extras = '') )
      THEN 1
      ELSE 0
  END) AS no_changes
FROM runner_orders ro
JOIN customer_orders co ON ro.order_id = co.order_id
WHERE pickup_time <> 'null'
AND pickup_time IS NOT NULL 
AND pickup_time <> ''
GROUP BY co.customer_id
ORDER BY co.customer_id;

8. How many pizzas were delivered that had both exclusions and extras? 

SELECT 
 sum(CASE 
      WHEN (exclusions IS NOT NULL AND exclusions <> 'null' AND exclusions <> '') AND (extras IS NOT NULL AND extras <> 'null' AND extras <> '') exclusions_and_extras
      THEN 1
      ELSE 0
  END) AS changes
FROM runner_orders ro
JOIN customer_orders co ON ro.order_id = co.order_id
WHERE pickup_time <> 'null'

9. What was the total volume of pizzas ordered for each hour of the day? 

SELECT 
  extract(hour from pickup_time::timestamp), 
  count(*)
FROM runner_orders ro
JOIN customer_orders co ON ro.order_id = co.order_id
WHERE pickup_time <> 'null'
AND pickup_time IS NOT NULL 
AND pickup_time <> ''
group by extract(hour from pickup_time::timestamp)

10. What was the volume of orders for each day of the week? 

SELECT 
  TO_CHAR(pickup_time::TIMESTAMP, 'FMDay') AS day_of_week, 
  COUNT(*) AS order_count
FROM runner_orders ro
JOIN customer_orders co ON ro.order_id = co.order_id
WHERE pickup_time <> 'null'
AND pickup_time IS NOT NULL 
AND pickup_time <> ''
GROUP BY TO_CHAR(pickup_time::TIMESTAMP, 'FMDay')
ORDER BY MIN(pickup_time::TIMESTAMP);


Section B

1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)

SELECT 
    DATE_TRUNC('week', registration_date)+ INTERVAL '4 days' AS week_start,
    COUNT(runner_id) AS num_runners
FROM runners
GROUP BY week_start
ORDER BY week_start;

2. What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?

SELECT 
  runner_id, 
  ROUND(AVG(EXTRACT(minute from (ro.pickup_time::timestamp - co.order_time::timestamp))),2)
FROM runner_orders ro
JOIN customer_orders co
on ro.order_id = co.order_id
WHERE pickup_time <> 'null'
AND pickup_time IS NOT NULL 
AND pickup_time <> ''
GROUP BY runner_id

3. Is there any relationship between the number of pizzas and how long the order takes to prepare?

WITH cte as (SELECT 
  co.order_id, 
  COUNT(co.order_id) as num_pizzas, 
  AVG(EXTRACT(minute from (ro.pickup_time::timestamp - co.order_time::timestamp))) timediff
FROM runner_orders ro
JOIN customer_orders co
on ro.order_id = co.order_id
WHERE pickup_time <> 'null'
AND pickup_time IS NOT NULL 
AND pickup_time <> ''
GROUP BY co.order_id)

SELECT 
  num_pizzas, 
  ROUND(AVG(timediff),2)
FROM cte
GROUP BY num_pizzas

4. What was the average distance travelled for each customer?

SELECT 
	  customer_id, 
    ROUND(AVG(CAST(REGEXP_REPLACE(distance, '[^0-9.]', '', 'g') as NUMERIC)),2)
FROM runner_orders ro
JOIN customer_orders co
on ro.order_id = co.order_id
WHERE pickup_time <> 'null'
AND pickup_time IS NOT NULL 
AND pickup_time <> ''
GROUP BY customer_id

5. What was the difference between the longest and shortest delivery times for all orders?

SELECT 
   MAX(CAST(REGEXP_REPLACE(duration, '[^0-9.]', '', 'g') AS NUMERIC)) -  MIN(CAST(REGEXP_REPLACE(duration, '[^0-9.]', '', 'g') AS NUMERIC))
FROM runner_orders ro
JOIN customer_orders co
on ro.order_id = co.order_id
WHERE pickup_time <> 'null'
AND pickup_time IS NOT NULL 
AND pickup_time <> ''

6. What was the average speed for each runner for each delivery and do you notice any trend for these values?


What is the successful delivery percentage for each runner?

